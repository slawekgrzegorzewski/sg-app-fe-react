scalar BigDecimal
scalar Currency
scalar LocalDate
scalar Upload
scalar UUID
scalar YearMonth
scalar Year

type Query {
    settings: Settings!
    financeManagement: FinanceManagement!
    domainInvitations: [DomainSimple!]!

    intellectualPropertiesReport(input: IntellectualPropertyReportQuery!): IntellectualPropertyReportResponse
    intellectualPropertiesRecords(input: IntellectualPropertiesRecordsQueryInput!): IntellectualPropertiesRecordsResponse
    allTimeRecordCategories: [TimeRecordCategory!]!
    tasks(input: TasksQueryInput!): TasksResponse!
    timeRecords(input: TimeRecordsQueryInput!): TimeRecordsResponse!

    loans: Loans!
    simulateLoan(loanCalculationParams: LoanCalculationParams): [LoanCalculationInstallment!]!
    simulateExistingLoan(loanSimulationParams: LoanSimulationParams): [LoanCalculationInstallment!]!
    singleLoan(input: LoanQuery): Loan!

    monthLedger(ledgerQuery: LedgerQuery): [RevenueAndExpenseEntry!]!
    allClients: [Client!]!
    allSuppliers: [Supplier!]!
    monthFinancialDocuments(yearMonthInput: YearMonthInput!): [FinancialDocument!]!
}

type Mutation{
    login(loginParameters:LoginParameters!): AuthenticationInfo!
    switchDomain(switchDomainParameters:SwitchDomainParameters!): AuthenticationInfo!
    register(registrationParameters:RegistrationParameters!): MFAData!
    setupMFA(mfaParameters:MFAParameters!): Boolean!

    createDomain(domainCreationInput: DomainCreationInput!): DomainSimple!
    updateDomain(domainUpdateInput: DomainUpdateInput!): DomainSimple!
    inviteUserToDomain(domainInvitationInput: DomainInvitationInput!): String!
    acceptInvitationToDomain(domainInvitationResponseInput: DomainInvitationResponseInput!): String!
    rejectInvitationToDomain(domainInvitationResponseInput: DomainInvitationResponseInput!): String!
    setUserDomainAccessLevel(domainSetAccessLevelInput: DomainSetAccessLevelInput!): String!

    updateAccountantSettings(accountantSettingsUpdateInput: AccountantSettingsUpdateInput!): String!
    createAccount(accountCreationInput: AccountCreationInput!): Account!
    updateAccount(accountUpdateInput: AccountUpdateInput!): Account!
    deleteAccount(accountPublicId: UUID!): String!
    reorderAccount(accountReorderInput: AccountReorderInput!): String!
    createBillingCategory(billingCategoryCreationInput: BillingCategoryCreationInput!): BillingCategory!
    updateBillingCategory(billingCategoryUpdateInput: BillingCategoryUpdateInput!): BillingCategory!
    deleteBillingCategory(billingCategoryPublicId: UUID!): String!
    createPiggyBank(piggyBankCreationInput: PiggyBankCreationInput!): PiggyBank!
    updatePiggyBank(piggyBankUpdateInput: PiggyBankUpdateInput!): PiggyBank!
    deletePiggyBank(piggyBankPublicId: UUID!): String!

    addIPR(input: IntellectualPropertyData): IntellectualProperty
    updateIPR(intellectualPropertyId: Int!, input: IntellectualPropertyData): IntellectualProperty
    deleteIPR(intellectualPropertyId: Int!): String!
    createTask(intellectualPropertyId: Int!, taskData: TaskData!): String!
    updateTask(taskId: Int!, taskData: TaskData!): String!
    deleteTask(taskId: Int!): String!
    uploadTaskAttachment(input: TaskAttachmentUploadData!): Boolean
    deleteTaskAttachment(input: TaskAttachmentDeleteData!): Boolean
    createTimeRecord(timeRecordData: TimeRecordData!): String!
    updateTimeRecord(timeRecordId: Int!, timeRecordData: TimeRecordData!): String!
    assignCategoryToTimeRecord(timeRecordId: Int!, timeRecordCategoryId: Int): String!
    deleteTimeRecord(timeRecordId: Int!): String!
    createTimeRecordCategory(name: String!): TimeRecordCategory!
    updateTimeRecordCategory(timeRecordId: Int!, name: String!): String!
    deleteTimeRecordCategory(timeRecordId:Int!): String!

    triggerTranslatedPJMVersesCheck: String!

    createLoan(input: LoanCreationInput): Loan!
    updateLoan(input: LoanUpdateInput): Loan!
    deleteLoan(input: LoanDeleteInput): String!
    createInstallment(input: InstallmentCreationInput!): Installment!
    deleteInstallment(installmentPublicId: UUID!): String!
    createConstantForNFirstInstallmentRateStrategyConfig(input: ConstantForNFirstInstallmentRateStrategyConfigCreationInput!): RateStrategyConfig!
    deleteRateStrategyConfig(input: RateStrategyConfigDeleteInput!): String!
    createNthDayOfMonthRepaymentDayStrategyConfig(input: NthDayOfMonthRepaymentDayStrategyConfigInput!): RepaymentDayStrategyConfig!
    deleteRepaymentDayStrategyConfig(input: RepaymentDayStrategyConfigDeleteInput!): String!

    addRevenueAndExpenseEntry(input: RevenueAndExpenseEntryInput):RevenueAndExpenseEntry
    createClient(clientCreationInput: ClientCreationInput!): Client!
    updateClient(clientUpdateInput: ClientUpdateInput!): Client!
    deleteClient(clientPublicId:UUID!): String!
    createSupplier(supplierCreationInput: SupplierCreationInput!): Supplier!
    updateSupplier(supplierUpdateInput: SupplierUpdateInput!): Supplier!
    deleteSupplier(supplierPublicId:UUID!): String!
    createBill(billCreationInput: BillCreationInput!): FinancialDocument!
    updateBill(billUpdateInput: BillUpdateInput!): FinancialDocument!
    createInvoice(invoiceCreationInput: InvoiceCreationInput!): Invoice!
    updateInvoice(invoiceUpdateInput: InvoiceUpdateInput!): Invoice!
    deleteFinancialDocument(financialDocumentPublicId: UUID!): String!
}

input IntellectualPropertiesRecordsQueryInput {
    yearMonthFilter: YearMonth
    onlyReportsWithoutAttachments: Boolean! = false
    onlyReportsHavingTasksWithNoAttachments: Boolean! = false
}

input TasksQueryInput {
    description: String! = ""
}

input TimeRecordsQueryInput {
    yearMonthFilter: YearMonth
}

input IntellectualPropertyReportQuery {
    year: Year!
}

type IntellectualPropertiesRecordsResponse {
    reports: [IntellectualProperty!]!
    stats: TimeRecordsStats!
}

type TimeRecordsReport {
    description: String!
    ipHours: BigDecimal!
    nonIPHours: BigDecimal!
}

type IntellectualPropertyMonthReport {
    yearMonth: YearMonth!
    ipHours: BigDecimal!
    nonIPHours: BigDecimal!
    ipPercentage: BigDecimal!
    timeRecordReports: [TimeRecordsReport!]!
    nonCategorizedTimeRecords: [TimeRecord!]!
}

type IntellectualPropertiesReport {
    year: Year!
    ipHours: BigDecimal!
    nonIPHours: BigDecimal!
    ipPercentage: BigDecimal!
    countOfDifferentIPs: Int!
    monthReports: [IntellectualPropertyMonthReport!]!
}

type IntellectualPropertyReportResponse {
    report: IntellectualPropertiesReport!
    timeRecordCategories: [TimeRecordCategory!]!
    availableYears: [Year!]
}

type TimeRecordsStats {
    firstTimeRecord: LocalDate!
    lastTimeRecord: LocalDate!
}

type TasksResponse {
    tasks: [Task!]!
}

type TimeRecordsResponse {
    taskWithSelectedTimeRecords: [Task!]!
    nonIPTimeRecords: [TimeRecord!]!
    stats: TimeRecordsStats!
}

input LoginParameters{
    login:String!
    password: String!
    otp:String!
    domainPublicId: UUID
}

input SwitchDomainParameters {
    domainPublicId: UUID
}

input RegistrationParameters{
    firstName:String!
    lastName:String!
    login:String!
    email: String!
    password: String!
    repeatedPassword: String!
}

input MFAParameters{
    login: String!
    password: String!
    otp: String!
}

input LoanCalculationParams {
    loanAmount: BigDecimal!,
    repaymentStart: LocalDate!,
    rate: BigDecimal!,
    wibor: BigDecimal!,
    numberOfInstallments: Int!,
    overpaymentMonthlyBudget: BigDecimal!,
    overpaymentYearlyBudget: BigDecimal!
}

input LoanSimulationParams {
    loanId: UUID!,
    monthlyBudget: MonetaryAmountInput,
    yearlyOverpayment: MonetaryAmountInput
}

type LoanCalculationInstallment {
    paymentFrom: LocalDate!
    paymentTo: LocalDate!,
    remainingCapitalAtTheBeginning: BigDecimal!,
    installment: BigDecimal!,
    repaidCapital: BigDecimal!,
    paidInterest: BigDecimal!,
    overpayment: BigDecimal!
}

input IntellectualPropertyData{
    description: String!
}

input TaskData{
    coAuthors: String!,
    description: String!
}

input TaskAttachmentUploadData {
    file: Upload!,
    taskId: Int!
}

input TaskAttachmentDeleteData {
    fileName: String!,
    taskId: Int!
}

enum AssignmentAction {
    NOP, ASSIGN, UNASSIGN
}

input TimeRecordData {
    taskId: Int,
    date: LocalDate!,
    numberOfHours: BigDecimal!,
    description: String!,
    assignmentAction: AssignmentAction!
}

type User {
    login: String!
    name: String!,
    email: String!,
    roles: [String!]!
    domainPublicId: UUID!,
    domains: [DomainSimple!]!
}

type AuthenticationInfo {
    jwt: String!
    user: User!
}

type MFAData {
    mfaCode: String!
    qrLink: String!
}

type DomainSimple {
    publicId: UUID!,
    name: String!
}

type Domain {
    publicId: UUID!,
    name: String!
    users: [DomainUser!]!
}

input DomainCreationInput {
    name: String!
}

input DomainUpdateInput {
    publicId: UUID!,
    name: String!
}

input DomainInvitationInput {
    publicId: UUID!,
    invitedUserLogin: String!
}

input DomainInvitationResponseInput {
    publicId: UUID!
}

input DomainSetAccessLevelInput {
    publicId: UUID!
    userLogin: String!
    domainAccessLevel: SetDomainAccessLevel!
}

type DomainUser {
    login: String!
    domainAccessLevel: DomainAccessLevel!
}

enum SetDomainAccessLevel {
    ADMIN, MEMBER, REMOVE
}

enum DomainAccessLevel {
    ADMIN, MEMBER
}

type IntellectualProperty {
    id: Int!,
    description: String!,
    tasks: [Task!],
    domain: DomainSimple!
}

type Task {
    id: Int!,
    attachments: [String!],
    coAuthors: String!,
    description: String!,
    timeRecords: [TimeRecord!]
}

type TimeRecord {
    id: Int!,
    date: LocalDate!,
    numberOfHours: BigDecimal!,
    description: String,
    timeRecordCategory: TimeRecordCategory,
    domain: DomainSimple!
}

type TimeRecordCategory {
    id: Int!,
    name: String!,
    domain: DomainSimple!
}

type RevenueAndExpenseEntry {
    publicId: UUID!,
    domain: DomainSimple!,
    entryOrder: Int!,
    entryDate: LocalDate!,
    accountingDocumentNumber: String!,
    counterparty: String!,
    counterpartyAddress: String!,
    description: String!,
    providedGoodsAndServicesValue: BigDecimal!,
    otherIncome: BigDecimal!,
    totalIncome: BigDecimal!,
    purchasedGoodsAndMaterialsValue: BigDecimal!,
    additionalCostOfPurchase: BigDecimal!,
    remunerationInCashOrInKind: BigDecimal!,
    otherExpense: BigDecimal!,
    totalExpense: BigDecimal!,
    comments: String!
}

input RevenueAndExpenseEntryInput {
    publicId: UUID,
    entryOrder: Int!,
    entryDate: LocalDate!,
    accountingDocumentNumber: String!,
    counterparty: String!,
    counterpartyAddress: String!,
    description: String!,
    providedGoodsAndServicesValue: BigDecimal!,
    otherIncome: BigDecimal!,
    totalIncome: BigDecimal!,
    purchasedGoodsAndMaterialsValue: BigDecimal!,
    additionalCostOfPurchase: BigDecimal!,
    remunerationInCashOrInKind: BigDecimal!,
    otherExpense: BigDecimal!,
    totalExpense: BigDecimal!,
    comments: String!
}

type CurrencyInfo {
    code: Currency!
    description: String!
}

type FinanceManagement {
    supportedCurrencies: [CurrencyInfo!]!
    accounts:[Account!]!
    billingCategories:[BillingCategory!]!
    piggyBanks:[PiggyBank!]!
}

type Account {
    publicId:UUID!,
    order:Int!,
    name:String!,
    currentBalance:MonetaryAmount!,
    creditLimit:MonetaryAmount!,
    balanceIndex:Int,
    visible:Boolean!,
    bankAccount:BankAccount,
    domain:DomainSimple,
}

input AccountCreationInput {
    name:String!,
    creditLimit:MonetaryAmountInput!,
    balanceIndex:Int,
    visible:Boolean!,
    bankAccountPublicId:UUID
}

input AccountUpdateInput {
    publicId:UUID!,
    name:String!,
    creditLimit:MonetaryAmountInput!,
    balanceIndex:Int,
    visible:Boolean!,
    bankAccountPublicId:UUID
}

input AccountReorderInput {
    accountPublicId:UUID!,
    putBetween: AccountPutBetweenInput!
}

input AccountPutBetweenInput {
    beforeAccountPublicId:UUID,
    afterAccountPublicId:UUID,
}

type BillingCategory {
    publicId: UUID!
    name: String!
    description: String!
    domain:DomainSimple!
}

input BillingCategoryCreationInput {
    name: String!
    description: String!
}

input BillingCategoryUpdateInput {
    publicId: UUID!
    name: String
    description: String
}

type PiggyBank {
    publicId: UUID!
    name: String!
    description: String!
    balance: MonetaryAmount!
    monthlyTopUp: MonetaryAmount!
    savings: Boolean!
    domain:DomainSimple!
}

input PiggyBankCreationInput {
    name: String!
    description: String!
    monthlyTopUp: MonetaryAmountInput!
    savings: Boolean!
}

input PiggyBankUpdateInput {
    publicId: UUID!
    name: String
    description: String
    balance: MonetaryAmountInput
    monthlyTopUp: MonetaryAmountInput
    savings: Boolean
}

type BankAccount {
    publicId: UUID!,
    iban: String!
}

interface RateStrategyConfig {
    publicId: UUID!,
    name: String!
}

type ConstantForNFirstInstallmentRateStrategyConfig implements RateStrategyConfig {
    publicId: UUID!,
    name: String!
    constantRate: BigDecimal!
    variableRateMargin: BigDecimal!
    becomesVariableRateAfterNInstallments: Int!
}

input ConstantForNFirstInstallmentRateStrategyConfigCreationInput {
    name: String!
    constantRate: BigDecimal!
    variableRateMargin: BigDecimal!
    becomesVariableRateAfterNInstallments: Int!
}

input RateStrategyConfigDeleteInput {
    publicId: UUID!
}

interface RepaymentDayStrategyConfig {
    publicId: UUID!,
    name: String!
}

type NthDayOfMonthRepaymentDayStrategyConfig implements RepaymentDayStrategyConfig {
    publicId: UUID!,
    name: String!
    dayOfMonth: Int!
}

input NthDayOfMonthRepaymentDayStrategyConfigInput {
    name: String!
    dayOfMonth: Int!
}

input RepaymentDayStrategyConfigDeleteInput {
    publicId: UUID!
}

type Loans {
    rateStrategyConfigs: [RateStrategyConfig!]!
    repaymentDayStrategyConfigs: [RepaymentDayStrategyConfig!]!
    loans: [Loan!]!
}

type MonetaryAmount {
    amount: BigDecimal!
    currency: CurrencyInfo!
}

input MonetaryAmountInput {
    amount: BigDecimal!
    currency: Currency!
}

type Installment {
    publicId: UUID!
    paidAt: LocalDate!
    repaidInterest: MonetaryAmount!
    repaidAmount: MonetaryAmount!
    overpayment: MonetaryAmount!
}

type Loan {
    publicId: UUID!
    name: String!
    paymentDate: LocalDate!
    numberOfInstallments: Int!
    repaymentDayStrategyConfig: RepaymentDayStrategyConfig!
    rateStrategyConfig: RateStrategyConfig!
    paidAmount: MonetaryAmount!
    installments: [Installment!]!
}

input LoanQuery {
    publicId: UUID!
}

input LoanCreationInput {
    name: String!
    paymentDate: LocalDate!
    numberOfInstallments: Int!
    repaymentDayStrategyConfigId: UUID!
    rateStrategyConfigId: UUID!
    paidAmount: MonetaryAmountInput!
}

input LoanUpdateInput {
    loanId: UUID!
    name: String!
}

input LoanDeleteInput {
    loanId: UUID!
}

input InstallmentCreationInput {
    loanId: UUID!
    paidAt: LocalDate!
    repaidInterest: MonetaryAmountInput!
    repaidAmount: MonetaryAmountInput!
    overpayment: MonetaryAmountInput!
}

input LedgerQuery {
    yearMonth: YearMonthInput!
}

input YearMonthInput {
    year: Int!
    month: Int!
}

interface OtherParty {
    publicId: UUID!
    name: String!
    domain: DomainSimple!
}

type Client implements OtherParty{
    publicId: UUID!
    name: String!
    domain: DomainSimple!
}

type Supplier implements OtherParty{
    publicId: UUID!
    name: String!
    domain: DomainSimple!
}

input ClientCreationInput {
    name: String!
}

input ClientUpdateInput {
    publicId: UUID!
    name: String!
}

input SupplierCreationInput {
    name: String!
}

input SupplierUpdateInput {
    publicId: UUID!
    name: String!
}

enum FinancialDocumentKind {
    BILL_OF_PURCHASE
    BILL_OF_SALE
    CREDIT_INVOICE
    DEBIT_INVOICE
}

enum BillType {
    BILL_OF_SALE
    BILL_OF_PURCHASE
}

input BillCreationInput {
    type: BillType!
    otherPartyId: UUID!
    name:String!
    description: String!
    amount: MonetaryAmountInput!
    createdAt: LocalDate!
}

input BillUpdateInput {
    type: BillType!
    billPublicId: UUID!
    otherPartyId: UUID!
    name:String!
    description: String!
    amount: MonetaryAmountInput!
    createdAt: LocalDate!
}

enum InvoiceType {
    CREDIT
    DEBIT
}

input InvoiceCreationInput {
    type: InvoiceType!
    name:String
    otherPartyId: UUID!
    amount: MonetaryAmountInput!
    vat: MonetaryAmountInput!
    createdAt: LocalDate!
    dueTo: LocalDate!
    description: String!
}


input InvoiceUpdateInput {
    type: InvoiceType!
    invoicePublicId: UUID!
    name:String
    otherPartyId: UUID!
    amount: MonetaryAmountInput!
    vat: MonetaryAmountInput!
    createdAt: LocalDate!
    dueTo: LocalDate!
    description: String!
}

interface FinancialDocument {
    publicId:UUID!
    name:String!
    otherParty:OtherParty!
    amount:MonetaryAmount!
    createdAt:LocalDate!
    description:String!
    domain:DomainSimple!
}

type BillOfPurchase implements FinancialDocument {
    publicId:UUID!
    name:String!
    otherParty:Supplier!
    amount:MonetaryAmount!
    createdAt:LocalDate!
    description:String!
    domain:DomainSimple!
}

type BillOfSale implements FinancialDocument {
    publicId:UUID!
    name:String!
    otherParty:Client!
    amount:MonetaryAmount!
    createdAt:LocalDate!
    description:String!
    domain:DomainSimple!
}

interface Invoice implements FinancialDocument {
    publicId:UUID!
    name:String!
    otherParty:OtherParty!
    amount:MonetaryAmount!
    vat:MonetaryAmount!
    createdAt:LocalDate!
    dueTo:LocalDate!
    description:String!
    domain:DomainSimple!
}

type CreditInvoice implements Invoice & FinancialDocument {
    publicId:UUID!
    name:String!
    otherParty:Client!
    amount:MonetaryAmount!
    vat:MonetaryAmount!
    createdAt:LocalDate!
    dueTo:LocalDate!
    description:String!
    domain:DomainSimple!
}

type DebitInvoice implements Invoice & FinancialDocument {
    publicId:UUID!
    name:String!
    otherParty:Supplier!
    amount:MonetaryAmount!
    vat:MonetaryAmount!
    createdAt:LocalDate!
    dueTo:LocalDate!
    description:String!
    domain:DomainSimple!
}

type Settings {
    accountantSettings: AccountantSettings!
    domains: [Domain!]!
}

type AccountantSettings {
    isCompany:Boolean!
}

input AccountantSettingsUpdateInput {
    isCompany:Boolean!
}